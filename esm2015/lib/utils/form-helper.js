import { Validators } from '@angular/forms';
import { buildUrlValidator } from '@polpware/ngx-input-validators';
export function makeValidations(data) {
    const validations = Object.keys(data);
    let x = validations.map(a => {
        switch (a) {
            case 'required':
                return Validators.required;
            case 'min':
                return Validators.min(data.min.value);
            case 'max':
                return Validators.max(data.max.value);
            case 'pattern':
                return Validators.pattern(data.pattern.value);
            case 'minLength':
                return Validators.minLength(data.minLength.value);
            case 'maxLength':
                return Validators.maxLength(data.maxLength.value);
            case 'url':
                return buildUrlValidator(data.url.options);
            default:
                return null;
        }
    });
    x = x.filter(a => !!a);
    return Validators.compose(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1oZWxwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvYnMtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9mb3JtLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFxQm5FLE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBc0I7SUFDbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hCLFFBQVEsQ0FBQyxFQUFFO1lBQ1AsS0FBSyxVQUFVO2dCQUNYLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUMvQixLQUFLLEtBQUs7Z0JBQ04sT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUMsS0FBSyxLQUFLO2dCQUNOLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEtBQUssU0FBUztnQkFDVixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRCxLQUFLLFdBQVc7Z0JBQ1osT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEQsS0FBSyxXQUFXO2dCQUNaLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RELEtBQUssS0FBSztnQkFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0M7Z0JBQ0ksT0FBTyxJQUFJLENBQUM7U0FDbkI7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZCLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFrQixDQUFDLENBQUM7QUFDbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBidWlsZFVybFZhbGlkYXRvciB9IGZyb20gJ0Bwb2xwd2FyZS9uZ3gtaW5wdXQtdmFsaWRhdG9ycyc7XHJcblxyXG5leHBvcnQgdHlwZSBJVmFsaWRhdGlvbnNTcGVjID0ge1xyXG4gICAgW2tleTogc3RyaW5nXToge1xyXG4gICAgICAgIHZhbHVlPzogYW55O1xyXG4gICAgICAgIG9wdGlvbnM/OiBhbnk7XHJcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSW5wdXRGaWVsZFNwZWMge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIHZhbHVlOiBhbnk7XHJcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xyXG4gICAgdmFsaWRhdG9yczogSVZhbGlkYXRpb25zU3BlYztcclxuICAgIG1hc2tTZXR0aW5ncz86IHtcclxuICAgICAgICBtYXNrOiBzdHJpbmc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVmFsaWRhdGlvbnMoZGF0YTogSVZhbGlkYXRpb25zU3BlYykge1xyXG4gICAgY29uc3QgdmFsaWRhdGlvbnMgPSBPYmplY3Qua2V5cyhkYXRhKTtcclxuICAgIGxldCB4ID0gdmFsaWRhdGlvbnMubWFwKGEgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoYSkge1xyXG4gICAgICAgICAgICBjYXNlICdyZXF1aXJlZCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5yZXF1aXJlZDtcclxuICAgICAgICAgICAgY2FzZSAnbWluJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1pbihkYXRhLm1pbi52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21heCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5tYXgoZGF0YS5tYXgudmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdwYXR0ZXJuJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnBhdHRlcm4oZGF0YS5wYXR0ZXJuLnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAnbWluTGVuZ3RoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1pbkxlbmd0aChkYXRhLm1pbkxlbmd0aC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21heExlbmd0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5tYXhMZW5ndGgoZGF0YS5tYXhMZW5ndGgudmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICd1cmwnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkVXJsVmFsaWRhdG9yKGRhdGEudXJsLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgeCA9IHguZmlsdGVyKGEgPT4gISFhKTtcclxuXHJcbiAgICByZXR1cm4gVmFsaWRhdG9ycy5jb21wb3NlKHggYXMgVmFsaWRhdG9yRm5bXSk7XHJcbn1cclxuXHJcbiJdfQ==