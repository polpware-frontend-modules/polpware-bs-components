import { Validators } from '@angular/forms';
export function makeValidations(data) {
    const validations = Object.keys(data);
    let x = validations.map(a => {
        switch (a) {
            case 'required':
                return Validators.required;
            case 'min':
                return Validators.min(data.min.value);
            case 'max':
                return Validators.max(data.max.value);
            case 'pattern':
                return Validators.pattern(data.pattern.value);
            case 'minLength':
                return Validators.minLength(data.minLength.value);
            case 'maxLength':
                return Validators.maxLength(data.maxLength.value);
            default:
                return null;
        }
    });
    x = x.filter(a => !!a);
    return Validators.compose(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1oZWxwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvYnMtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9mb3JtLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFpQnpELE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBc0I7SUFDbEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hCLFFBQVEsQ0FBQyxFQUFFO1lBQ1AsS0FBSyxVQUFVO2dCQUNYLE9BQU8sVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUMvQixLQUFLLEtBQUs7Z0JBQ04sT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUMsS0FBSyxLQUFLO2dCQUNOLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEtBQUssU0FBUztnQkFDVixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNsRCxLQUFLLFdBQVc7Z0JBQ1osT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEQsS0FBSyxXQUFXO2dCQUNaLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3REO2dCQUNJLE9BQU8sSUFBSSxDQUFDO1NBQ25CO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2QixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBa0IsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZGF0b3JGbiwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmV4cG9ydCB0eXBlIElWYWxpZGF0aW9uc1NwZWMgPSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiB7XHJcbiAgICAgICAgdmFsdWU6IGFueTtcclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElJbnB1dEZpZWxkU3BlYyB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgdmFsdWU6IGFueTtcclxuICAgIGNhdGVnb3J5OiBzdHJpbmc7XHJcbiAgICB2YWxpZGF0aW9uczogSVZhbGlkYXRpb25zU3BlYztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VWYWxpZGF0aW9ucyhkYXRhOiBJVmFsaWRhdGlvbnNTcGVjKSB7XHJcbiAgICBjb25zdCB2YWxpZGF0aW9ucyA9IE9iamVjdC5rZXlzKGRhdGEpO1xyXG4gICAgbGV0IHggPSB2YWxpZGF0aW9ucy5tYXAoYSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChhKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVkJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICBjYXNlICdtaW4nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWluKGRhdGEubWluLnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAnbWF4JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1heChkYXRhLm1heC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ3BhdHRlcm4nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMucGF0dGVybihkYXRhLnBhdHRlcm4udmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdtaW5MZW5ndGgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWluTGVuZ3RoKGRhdGEubWluTGVuZ3RoLnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAnbWF4TGVuZ3RoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1heExlbmd0aChkYXRhLm1heExlbmd0aC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB4ID0geC5maWx0ZXIoYSA9PiAhIWEpO1xyXG5cclxuICAgIHJldHVybiBWYWxpZGF0b3JzLmNvbXBvc2UoeCBhcyBWYWxpZGF0b3JGbltdKTtcclxufVxyXG5cclxuIl19