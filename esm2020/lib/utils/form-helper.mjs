import { Validators } from '@angular/forms';
import { buildUrlValidator } from '@polpware/ngx-input-validators';
export function makeValidations(data) {
    const validations = Object.keys(data);
    let x = validations.map(a => {
        switch (a) {
            case 'required':
                return Validators.required;
            case 'min':
                return Validators.min(data.min.value);
            case 'max':
                return Validators.max(data.max.value);
            case 'pattern':
                return Validators.pattern(data.pattern.value);
            case 'minLength':
                return Validators.minLength(data.minLength.value);
            case 'maxLength':
                return Validators.maxLength(data.maxLength.value);
            case 'url':
                return buildUrlValidator(data.url.options);
            default:
                return null;
        }
    });
    x = x.filter(a => !!a);
    return Validators.compose(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wb2xwd2FyZS9icy1jb21wb25lbnRzL3NyYy9saWIvdXRpbHMvZm9ybS1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBcUJuRSxNQUFNLFVBQVUsZUFBZSxDQUFDLElBQXNCO0lBQ2xELE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN4QixRQUFRLENBQUMsRUFBRTtZQUNQLEtBQUssVUFBVTtnQkFDWCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDL0IsS0FBSyxLQUFLO2dCQUNOLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEtBQUssS0FBSztnQkFDTixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxLQUFLLFNBQVM7Z0JBQ1YsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsS0FBSyxXQUFXO2dCQUNaLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RELEtBQUssV0FBVztnQkFDWixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RCxLQUFLLEtBQUs7Z0JBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9DO2dCQUNJLE9BQU8sSUFBSSxDQUFDO1NBQ25CO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV2QixPQUFPLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBa0IsQ0FBQyxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZGF0b3JGbiwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgYnVpbGRVcmxWYWxpZGF0b3IgfSBmcm9tICdAcG9scHdhcmUvbmd4LWlucHV0LXZhbGlkYXRvcnMnO1xyXG5cclxuZXhwb3J0IHR5cGUgSVZhbGlkYXRpb25zU3BlYyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IHtcclxuICAgICAgICB2YWx1ZT86IGFueTtcclxuICAgICAgICBvcHRpb25zPzogYW55O1xyXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUlucHV0RmllbGRTcGVjIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogYW55O1xyXG4gICAgY2F0ZWdvcnk6IHN0cmluZztcclxuICAgIHZhbGlkYXRvcnM6IElWYWxpZGF0aW9uc1NwZWM7XHJcbiAgICBtYXNrU2V0dGluZ3M/OiB7XHJcbiAgICAgICAgbWFzazogc3RyaW5nO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhbGlkYXRpb25zKGRhdGE6IElWYWxpZGF0aW9uc1NwZWMpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb25zID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICBsZXQgeCA9IHZhbGlkYXRpb25zLm1hcChhID0+IHtcclxuICAgICAgICBzd2l0Y2ggKGEpIHtcclxuICAgICAgICAgICAgY2FzZSAncmVxdWlyZWQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMucmVxdWlyZWQ7XHJcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5taW4oZGF0YS5taW4udmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdtYXgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4KGRhdGEubWF4LnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAncGF0dGVybic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5wYXR0ZXJuKGRhdGEucGF0dGVybi52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21pbkxlbmd0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5taW5MZW5ndGgoZGF0YS5taW5MZW5ndGgudmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdtYXhMZW5ndGgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4TGVuZ3RoKGRhdGEubWF4TGVuZ3RoLnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAndXJsJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZFVybFZhbGlkYXRvcihkYXRhLnVybC5vcHRpb25zKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHggPSB4LmZpbHRlcihhID0+ICEhYSk7XHJcblxyXG4gICAgcmV0dXJuIFZhbGlkYXRvcnMuY29tcG9zZSh4IGFzIFZhbGlkYXRvckZuW10pO1xyXG59XHJcblxyXG4iXX0=