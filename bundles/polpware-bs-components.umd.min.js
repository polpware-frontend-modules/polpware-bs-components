!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("rxjs"),require("ngx-bootstrap/modal"),require("@angular/forms"),require("@fortawesome/free-solid-svg-icons"),require("@polpware/ngx-form-common"),require("uuid"),require("@polpware/ngx-input-validators"),require("@polpware/ngx-email-composer"),require("@angular/common"),require("@angular/router"),require("@40three/ngx-autofocus-directive"),require("ngx-autosize"),require("ngx-chips"),require("ngx-mask"),require("@fortawesome/angular-fontawesome"),require("ngx-bootstrap/alert"),require("ngx-bootstrap/collapse"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("@polpware/bs-components",["exports","@angular/core","rxjs","ngx-bootstrap/modal","@angular/forms","@fortawesome/free-solid-svg-icons","@polpware/ngx-form-common","uuid","@polpware/ngx-input-validators","@polpware/ngx-email-composer","@angular/common","@angular/router","@40three/ngx-autofocus-directive","ngx-autosize","ngx-chips","ngx-mask","@fortawesome/angular-fontawesome","ngx-bootstrap/alert","ngx-bootstrap/collapse","rxjs/operators"],n):n(((e=e||self).polpware=e.polpware||{},e.polpware["bs-components"]={}),e.ng.core,e.rxjs,e.modal,e.ng.forms,e.freeSolidSvgIcons,e.ngxFormCommon,e.uuid,e.ngxInputValidators,e.ngxEmailComposer,e.ng.common,e.ng.router,e.ngxAutofocusDirective,e.ngxAutosize,e.ngxChips,e.ngxMask,e.angularFontawesome,e.alert,e.collapse,e.rxjs.operators)}(this,(function(e,n,t,o,i,s,r,a,l,c,p,m,d,u,f,g,y,h,b,v){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var C=function(e,n){return(C=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,n){e.__proto__=n}||function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t])})(e,n)};function I(e,n){function t(){this.constructor=e}C(e,n),e.prototype=null===n?Object.create(n):(t.prototype=n.prototype,new t)}var x,S=function(){return(S=Object.assign||function(e){for(var n,t=1,o=arguments.length;t<o;t++)for(var i in n=arguments[t])Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i]);return e}).apply(this,arguments)};function B(e,n,t,o){var i,s=arguments.length,r=s<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,n,t,o);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(r=(s<3?i(r):s>3?i(n,t,r):i(n,t))||r);return s>3&&r&&Object.defineProperty(n,t,r),r}function w(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)}function k(e,n){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var o,i,s=t.call(e),r=[];try{for(;(void 0===n||n-- >0)&&!(o=s.next()).done;)r.push(o.value)}catch(e){i={error:e}}finally{try{o&&!o.done&&(t=s.return)&&t.call(s)}finally{if(i)throw i.error}}return r}(x=e.ActionKind||(e.ActionKind={}))[x.NO_ACTION=0]="NO_ACTION",x[x.URL_LINK=1]="URL_LINK",x[x.ROUTER_LINK=2]="ROUTER_LINK",x[x.CUSTOM_ACTION=3]="CUSTOM_ACTION";var E,T=function(){function t(){this.items=[],this.listClasses="breadcrumb",this.inactiveItemClasses="breadcrumb-item",this.activeItemClasses="breadcrumb-item active",this.interItems=[],this.activeItem=null}return t.prototype.ngOnInit=function(){this.update()},t.prototype.ngOnChanges=function(){this.update()},t.prototype.update=function(){if(this.items.forEach((function(n){n.routerLink?n.kind=e.ActionKind.ROUTER_LINK:n.url?n.kind=e.ActionKind.URL_LINK:n.action?n.kind=e.ActionKind.CUSTOM_ACTION:n.kind=e.ActionKind.NO_ACTION})),this.interItems=[],this.activeItem=null,this.items.length>0){for(var n=0;n<this.items.length-1;n++)this.interItems.push(this.items[n]);this.activeItem=this.items[this.items.length-1]}},B([n.Input(),w("design:type",Array)],t.prototype,"items",void 0),B([n.Input(),w("design:type",String)],t.prototype,"listClasses",void 0),B([n.Input(),w("design:type",String)],t.prototype,"inactiveItemClasses",void 0),B([n.Input(),w("design:type",String)],t.prototype,"activeItemClasses",void 0),t=B([n.Component({selector:"polp-bs-breadcrumb",template:'    <ol [ngClass]="listClasses">\n        <li [ngClass]="inactiveItemClasses" *ngFor="let item of interItems">\n            <ng-container [ngSwitch]="item.kind">\n                <a [href]="item.url" *ngSwitchCase="1">{{item.title}}</a>\n                <a [routerLink]="item.routerLink" [queryParams]="item.queryParams || {}" *ngSwitchCase="2">{{item.title}}</a>\n                <a (click)="item.action()" *ngSwitchCase="3">{{item.title}}</a>\n                <a *ngSwitchDefault>{{item.title}}</a>                \n            </ng-container>\n        </li>\n        <li [ngClass]="activeItemClasses" aria-current="page" *ngIf="activeItem as item">\n            <ng-container [ngSwitch]="item.kind">\n                <a [href]="item.url" *ngSwitchCase="1">{{item.title}}</a>\n                <a [routerLink]="item.routerLink" [queryParams]="item.queryParams || {}" *ngSwitchCase="2">{{item.title}}</a>\n                <a (click)="item.action()" *ngSwitchCase="3">{{item.title}}</a>\n                <a *ngSwitchDefault>{{item.title}}</a>                \n            </ng-container>\n        </li>\n    </ol>\n',styles:[""]})],t)}(),O=function(){function e(){this.clipboard=new t.BehaviorSubject([])}return e.prototype.paste=function(e){this.clipboard.next(e)},e.ɵprov=n.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e=B([n.Injectable({providedIn:"root"}),w("design:paramtypes",[])],e)}();!function(e){e[e.ENTER=13]="ENTER"}(E||(E={}));var M,j=function(){function e(e){this._bsModalRef=e,this.enableEnter=!1,this.result=new t.Subject}return e.prototype.ngOnInit=function(){this.hideNoBtn=this.hideNoBtn||!1,this.yesBtnLabel=this.yesBtnLabel||"Yes",this.noBtnLabel=this.noBtnLabel||"No",this.yesBtnClasses=this.yesBtnClasses||"btn-primary",this.noBtnClasses=this.noBtnClasses||"btn-secondary"},e.prototype.keyEvent=function(e){this.enableEnter&&e.keyCode===E.ENTER&&this.confirm()},e.prototype.close=function(){this.result.next(!1),this.result.complete(),this._bsModalRef.hide()},e.prototype.confirm=function(){this.result.next(!0),this.result.complete(),this._bsModalRef.hide()},e.ctorParameters=function(){return[{type:o.BsModalRef}]},B([n.Input(),w("design:type",Boolean)],e.prototype,"hideNoBtn",void 0),B([n.Input(),w("design:type",String)],e.prototype,"yesBtnLabel",void 0),B([n.Input(),w("design:type",String)],e.prototype,"noBtnLabel",void 0),B([n.Input(),w("design:type",String)],e.prototype,"noBtnClasses",void 0),B([n.Input(),w("design:type",String)],e.prototype,"yesBtnClasses",void 0),B([n.Input(),w("design:type",Boolean)],e.prototype,"enableEnter",void 0),B([n.Input(),w("design:type",String)],e.prototype,"title",void 0),B([n.Input(),w("design:type",String)],e.prototype,"innerBody",void 0),B([n.HostListener("window:keyup",["$event"]),w("design:type",Function),w("design:paramtypes",[KeyboardEvent]),w("design:returntype",void 0)],e.prototype,"keyEvent",null),e=B([n.Component({selector:"polp-bs-alert-box",template:'<div class="modal-header">\n    <h4 class="modal-title pull-left">{{title}}</h4>\n    <button type="button" class="close pull-right" aria-label="Close" (click)="close()">\n        <span aria-hidden="true">&times;</span>\n    </button>\n</div>\n<div class="modal-body">\n    <div [innerHtml]="innerBody">\n    </div>\n</div>\n<div class="modal-footer">\n    <button type="button" class="btn mr-2" [ngClass]="noBtnClasses" (click)="close()" *ngIf="!hideNoBtn">\n        {{noBtnLabel}}\n    </button>    \n    <button type="button" class="btn" [ngClass]="yesBtnClasses" (click)="confirm()">\n        {{yesBtnLabel}}\n    </button>\n</div>\n\n\n',styles:[""]}),w("design:paramtypes",[o.BsModalRef])],e)}();function A(e){var n=Object.keys(e).map((function(n){switch(n){case"required":return i.Validators.required;case"min":return i.Validators.min(e.min.value);case"max":return i.Validators.max(e.max.value);case"pattern":return i.Validators.pattern(e.pattern.value);case"minLength":return i.Validators.minLength(e.minLength.value);case"maxLength":return i.Validators.maxLength(e.maxLength.value);case"url":return l.buildUrlValidator(e.url.options);default:return null}}));return n=n.filter((function(e){return!!e})),i.Validators.compose(n)}function _(){return"alpha-"+a.v4()}!function(e){e[e.ENTER=13]="ENTER"}(M||(M={}));var N=1,R=function(e){function t(n){var t=e.call(this)||this;return t._builder=n,t.enableEnter=!1,t.emitInitValue=!1,t.faEyeSlash=s.faEyeSlash,t.faEye=s.faEye,t.name="promptName"+N++,t}return I(t,e),t.prototype.ngOnInit=function(){var e=this;this.submitBtnTxt=this.submitBtnTxt||"Confirm",this.cancelBtnTxt=this.cancelBtnTxt||"Cancel",this.submitBtnClasses=this.submitBtnClasses||"btn-primary",this.cancelBtnClasses=this.cancelBtnClasses||"btn-secondary",this.autocomplete?this.extFields=this.fields.map((function(n){var t="section-polp-bs-prompt-form-"+e.autocomplete+" "+n.name;return S(S({},n),{fieldId:_(),autocompleteKey:t,visible:!1})})):this.extFields=this.fields.map((function(e){return S(S({},e),{fieldId:_(),visible:!1})}));var n={};this.extFields.forEach((function(e){n[e.name]=new i.FormControl(e.value,A(e.validators))})),this.form=this._builder.group(n),this._subr=this.form.valueChanges.subscribe((function(n){e.notifyValidation(),e.notifyValueChanges(n)}))},t.prototype.ngOnDestroy=function(){this._subr.unsubscribe()},t.prototype.ngAfterViewInit=function(){var e=this;this.emitInitValue&&setTimeout((function(){var n=e.form.value;e.notifyValidation(),e.notifyValueChanges(n)}))},t.prototype.cancel=function(){this.onCancel.emit(null)},t.prototype.submit=function(){this.onSave.emit(this.form.value)},t.prototype.keyEvent=function(e){this.enableEnter&&e.keyCode===M.ENTER&&this.form.valid&&this.submit()},t.ctorParameters=function(){return[{type:i.FormBuilder}]},B([n.Input(),w("design:type",String)],t.prototype,"autocomplete",void 0),B([n.Input(),w("design:type",Boolean)],t.prototype,"enableEnter",void 0),B([n.Input(),w("design:type",String)],t.prototype,"cancelBtnClasses",void 0),B([n.Input(),w("design:type",String)],t.prototype,"submitBtnClasses",void 0),B([n.Input(),w("design:type",Array)],t.prototype,"fields",void 0),B([n.Input(),w("design:type",Boolean)],t.prototype,"emitInitValue",void 0),B([n.HostListener("window:keyup",["$event"]),w("design:type",Function),w("design:paramtypes",[KeyboardEvent]),w("design:returntype",void 0)],t.prototype,"keyEvent",null),t=B([n.Component({selector:"polp-bs-prompt-form",template:'<form [formGroup]="form" name="{{name}}" autocomplete="autocomplete ? \'on\' : \'off\'">\n    <div class="form-group mb-4" *ngFor="let elem of extFields; first as isFirst;">\n        <ng-container *ngIf="autocomplete;else disableTmpl">            \n            <ng-container [ngSwitch]="elem.category">\n                \x3c!-- Checkbox --\x3e\n                <ng-container *ngSwitchCase="\'checkbox\'">\n                    <div class="form-check">\n                        <input formControlName="{{elem.name}}"\n                               class="form-check-input"\n                               type="checkbox"\n                               name="{{elem.fieldId}}"\n                               id="{{elem.fieldId}}">\n                        <label class="form-check-label" for="{{elem.fieldId}}">\n                            {{elem.label}}\n                        </label>\n                    </div>                    \n                </ng-container>\n                \x3c!-- Radio --\x3e\n                <ng-container *ngSwitchCase="\'radio\'">\n                    <div class="form-check" *ngFor="let o of elem.options; let i = index">\n                        <input formControlName="{{elem.name}}"\n                               class="form-check-input"\n                               type="radio"\n                               value="{{o.value}}"\n                               name="{{elem.fieldId}}"\n                               id="{{elem.fieldId + i}}">\n                        <label class="form-check-label" for="{{elem.fieldId + i}}">\n                            {{o.label}}\n                        </label>\n                    </div>                    \n                </ng-container>\n                \x3c!-- Select --\x3e\n                <ng-container *ngSwitchCase="\'select\'">\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <select class="form-control" id="{{elem.fieldId}}">\n                        <option>Choose ...</option>\n                        <option *ngFor="let o of elem.options" value="{{o.value}}">\n                            {{o.label}}\n                        </option>\n                    </select>                    \n                </ng-container>\n                \x3c!-- textarea --\x3e\n                <ng-container *ngSwitchCase="\'textarea\'">\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <textarea formControlName="{{elem.name}}" \n                              id="{{elem.fieldId}}"\n                              name="{{elem.fieldId}}"                          \n                              autosize \n                              [autofocus]="isFirst"\n                              class="form-control">\n                    </textarea>\n                </ng-container>\n                \x3c!-- password --\x3e\n                <ng-container *ngSwitchCase="\'password\'">\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <div class="input-group">                        \n                        <input formControlName="{{elem.name}}"\n                               id="{{elem.fieldId}}"\n                               name="{{elem.fieldId}}"                           \n                               type="{{elem.visible ? \'text\' : \'password\'}}"\n                               [autofocus]="isFirst"\n                               class="form-control" />\n                        <div class="input-group-append">\n                            <button class="btn btn-outline-secondary icon-only" type="button"\n                                    (click)="elem.visible = !elem.visible">\n                                <fa-icon [icon]="elem.visible ? faEyeSlash : faEye">\n                                </fa-icon>\n                            </button>\n                        </div>\n                    </div>\n                </ng-container>\n                \x3c!-- Otherwise --\x3e\n                <ng-container *ngSwitchDefault>\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <input *ngIf="!elem.maskSettings; else maskTmpl"\n                           formControlName="{{elem.name}}" \n                           autocomplete="{{elem.autocompleteKey}}"\n                           id="{{elem.fieldId}}"\n                           name="{{elem.fieldId}}"                           \n                           type="{{elem.category}}"\n                           [autofocus]="isFirst"\n                           class="form-control" />\n                    <ng-template #maskTmpl>\n                        <input *ngIf="elem.maskSettings"\n                               formControlName="{{elem.name}}"\n                               autocomplete="{{elem.autocompleteKey}}"\n                               id="{{elem.fieldId}}"\n                               name="{{elem.fieldId}}"                           \n                               type="{{elem.category}}"\n                               [autofocus]="isFirst"\n                               mask="{{elem.maskSettings.mask}}"\n                               class="form-control" />\n                    </ng-template>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n        <ng-template #disableTmpl>\n            <ng-container [ngSwitch]="elem.category">\n                \x3c!-- Checkbox --\x3e\n                <ng-container *ngSwitchCase="\'checkbox\'">\n                    <div class="form-check">\n                        <input formControlName="{{elem.name}}"\n                               class="form-check-input"\n                               type="checkbox"\n                               name="{{elem.fieldId}}"\n                               id="{{elem.fieldId}}">\n                        <label class="form-check-label" for="{{elem.fieldId}}">\n                            {{elem.label}}\n                        </label>\n                    </div>                    \n                </ng-container>\n                \x3c!-- Radio --\x3e\n                <ng-container *ngSwitchCase="\'radio\'">\n                    <div class="form-check" *ngFor="let o of elem.options; let i = index">\n                        <input formControlName="{{elem.name}}"\n                               class="form-check-input"\n                               type="radio"\n                               value="{{o.value}}"\n                               name="{{elem.fieldId}}"\n                               id="{{elem.fieldId + i}}">\n                        <label class="form-check-label" for="{{elem.fieldId + i}}">\n                            {{o.label}}\n                        </label>\n                    </div>                    \n                </ng-container>\n                \x3c!-- Select --\x3e\n                <ng-container *ngSwitchCase="\'select\'">\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <select class="form-control" id="{{elem.fieldId}}">\n                        <option>Choose ...</option>\n                        <option *ngFor="let o of elem.options" value="{{o.value}}">\n                            {{o.label}}\n                        </option>\n                    </select>                    \n                </ng-container>\n                \x3c!-- textarea --\x3e\n                <ng-container *ngSwitchCase="\'textarea\'">\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <textarea formControlName="{{elem.name}}" \n                              id="{{elem.fieldId}}"\n                              name="{{elem.fieldId}}"                                                    \n                              autosize \n                              [autofocus]="isFirst"\n                              class="form-control">\n                    </textarea>\n                </ng-container>\n                \x3c!-- password --\x3e\n                <ng-container *ngSwitchCase="\'password\'">\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <div class="input-group"> \n                        <input formControlName="{{elem.name}}"\n                               id="{{elem.fieldId}}"\n                               name="{{elem.fieldId}}"                           \n                               type="{{elem.visible ? \'text\' : \'password\'}}"\n                               [autofocus]="isFirst"\n                               class="form-control" />\n                        <div class="input-group-append">\n                            <button class="btn btn-outline-secondary icon-only" type="button"\n                                    (click)="elem.visible = !elem.visible">\n                                <fa-icon [icon]="elem.visible ? faEyeSlash : faEye">\n                                </fa-icon>\n                            </button>\n                        </div>\n                    </div>\n                </ng-container>\n                \x3c!-- Others --\x3e\n                <ng-container *ngSwitchDefault>\n                    <label for="{{elem.fieldId}}">\n                        {{elem.label}}\n                    </label>\n                    <input *ngIf="!elem.maskSettings; else anotherMaskTmpl"\n                           formControlName="{{elem.name}}"\n                           id="{{elem.fieldId}}"\n                           name="{{elem.fieldId}}"                           \n                           type="{{elem.category}}"\n                           [autofocus]="isFirst"\n                           class="form-control" />\n                    <ng-template #anotherMaskTmpl>\n                        <input formControlName="{{elem.name}}"\n                               id="{{elem.fieldId}}"\n                               name="{{elem.fieldId}}"                           \n                               type="{{elem.category}}"\n                               [autofocus]="isFirst"\n                               mask="{{elem.maskSettings.mask}}"\n                               class="form-control" />\n                    </ng-template>\n                </ng-container>\n            </ng-container>\n        </ng-template>                \n\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.required && (form.touched || form.dirty)">\n            {{elem.validators.required.message}}\n        </small>\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.min && (form.touched || form.dirty)">\n            {{elem.validators.min.message}}\n        </small>\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.max && (form.touched || form.dirty)">\n            {{elem.validators.max.message}}\n        </small>\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.pattern && (form.touched || form.dirty)">\n            {{elem.validators.pattern.message}}\n        </small>\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.minlength && (form.touched || form.dirty)">\n            {{elem.validators.minLength.message}}\n        </small>\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.maxlength && (form.touched || form.dirty)">\n            {{elem.validators.maxLength.message}}\n        </small>\n        <small class="text-danger" *ngIf="form.controls[elem.name].errors?.url && (form.touched || form.dirty)">\n            {{elem.validators.url.message}}\n        </small>\n    </div>\n    \n    <div class="form-group d-flex justify-content-end">\n        <button *ngIf="!hideCancelBtn"\n                type="button" class="btn mr-2"\n                [ngClass]="cancelBtnClasses" (click)="cancel()" >\n            {{cancelBtnTxt}}\n        </button>    \n        <button *ngIf="!hideSubmitBtn"\n                type="button" class="btn"\n                [ngClass]="submitBtnClasses" [disabled]="!form.valid" (click)="submit()">\n            {{submitBtnTxt}}\n        </button>\n    </div>\n    \n</form>\n\n\n',inputs:["hideCancelBtn","hideSubmitBtn","submitBtnTxt","cancelBtnTxt"],styles:[""]}),w("design:paramtypes",[i.FormBuilder])],t)}(r.DefaultFormBaseComponent),L=function(){function e(e){this._bsModalRef=e,this.enableEnter=!1,this.hideCancelBtn=!1,this.hideConfirmBtn=!1,this.hideCloseBtn=!1,this.result=new t.Subject}return e.prototype.ngOnInit=function(){},e.prototype.close=function(){this.result.next(null),this.result.complete(),this._bsModalRef.hide()},e.prototype.confirm=function(e){this.result.next(e),this.result.complete(),this._bsModalRef.hide()},e.ctorParameters=function(){return[{type:o.BsModalRef}]},B([n.Input(),w("design:type",String)],e.prototype,"autocomplete",void 0),B([n.Input(),w("design:type",Boolean)],e.prototype,"enableEnter",void 0),B([n.Input(),w("design:type",Boolean)],e.prototype,"hideCancelBtn",void 0),B([n.Input(),w("design:type",Boolean)],e.prototype,"hideConfirmBtn",void 0),B([n.Input(),w("design:type",Boolean)],e.prototype,"hideCloseBtn",void 0),B([n.Input(),w("design:type",String)],e.prototype,"cancelBtnLabel",void 0),B([n.Input(),w("design:type",String)],e.prototype,"confirmBtnLabel",void 0),B([n.Input(),w("design:type",String)],e.prototype,"cancelBtnClasses",void 0),B([n.Input(),w("design:type",String)],e.prototype,"confirmBtnClasses",void 0),B([n.Input(),w("design:type",String)],e.prototype,"title",void 0),B([n.Input(),w("design:type",String)],e.prototype,"innerBody",void 0),B([n.Input(),w("design:type",Array)],e.prototype,"fields",void 0),B([n.Output(),w("design:type",t.Subject)],e.prototype,"result",void 0),e=B([n.Component({selector:"polp-bs-prompt-modal",template:'<div class="modal-header">\n    <h4 class="modal-title pull-left">{{title}}</h4>\n    <button type="button" class="close pull-right" aria-label="Close" (click)="close()" *ngIf="!hideCloseBtn">\n        <span aria-hidden="true">&times;</span>\n    </button>\n</div>\n<div class="modal-body">\n    <div [innerHtml]="innerBody">\n    </div>\n    <polp-bs-prompt-form [fields]="fields"\n                         [hideCancelBtn]="hideCancelBtn"\n                         [hideSubmitBtn]="hideConfirmBtn"\n                         [cancelBtnTxt]="cancelBtnLabel"\n                         [submitBtnTxt]="confirmBtnLabel"\n                         [cancelBtnClasses]="cancelBtnClasses"\n                         [submitBtnClasses]="confirmBtnClasses"\n                         [autocomplete]="autocomplete"\n                         [enableEnter]="enableEnter"\n                         (onCancel)="close()"\n                         (onSave)="confirm($event)">\n    </polp-bs-prompt-form>\n</div>\n',styles:[""]}),w("design:paramtypes",[o.BsModalRef])],e)}(),F=function(e){function t(){var t=e.call(this)||this;return t.faSpinner=s.faSpinner,t.initEmails=[],t.onClose=new n.EventEmitter,t}return I(t,e),Object.defineProperty(t.prototype,"bsAlertType",{get:function(){switch(this.alertType){case c.AlertTypeEnum.info:return"info";case c.AlertTypeEnum.error:return"danger";case c.AlertTypeEnum.success:return"success";case c.AlertTypeEnum.warning:return"warning";default:return"info"}},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){this.initEmails&&Array.isArray(this.initEmails)&&(this.emails=function(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(k(arguments[n]));return e}(this.initEmails))},t.prototype.ngAfterViewInit=function(){var e=this;setTimeout((function(){e.emailInputBox.focus(!0)}),200)},t.prototype.submit=function(){if(!(this.messageTitle&&this.messageBody&&this.emails.length))return this.alertType=c.AlertTypeEnum.error,this.alertMessage="Please provide required values and try again!",this.alertSubMessage="",void(this.alertDismissible=!0);this.alertType=c.AlertTypeEnum.none,this.alertMessage="",this.alertSubMessage="",this.alertDismissible=!0,e.prototype.submit.call(this)},t.prototype.close=function(){this.onClose.emit()},B([n.Input(),w("design:type",Array)],t.prototype,"initEmails",void 0),B([n.Output(),w("design:type",Object)],t.prototype,"onClose",void 0),t=B([n.Component({selector:"polp-email-composer",template:'<alert [type]="bsAlertType" [dismissible]="alertDismissible" *ngIf="alertType > 0">\n    <p>\n        {{alertMessage}}\n    </p>\n</alert>\n\n<div>\n    <div class="form-group mb-4">\n        <label>Recipients</label>\n        <tag-input [(ngModel)]="emails" #emailInputBox\n                   name="emailInputs"\n                   (focusout)="onOutOfTagInput($event)"\n                   (onTextChange)="textChanged($event)"\n                   [addOnPaste]="true"\n                   [modelAsStrings]="true"\n                   [trimTags]="true"\n                   [editable]="true"\n                   [errorMessages]="errorMessages"\n                   [validators]="validators"\n                   [secondaryPlaceholder]="\'Emails\'"\n                   [separatorKeyCodes]="[32,44,58,59]"\n                   [displayBy]="\'display\'"\n                   [identifyBy]="\'value\'"                       \n                   [placeholder]="\'+ Email\'">\n            <tag-input-dropdown [autocompleteItems]="autocompleteItemsAsync | async">\n                <ng-template let-item="item" let-index="index">\n                    {{ item.display }}\n                </ng-template>\n            </tag-input-dropdown>\n        </tag-input>\n    </div>\n\n    <div class="form-group mb-4">\n        <label for="messageTitleInput">Subject</label>\n        <input name="messageTitleInput" id="messageTitleInput" \n               class="form-control"\n               [(ngModel)]="messageTitle" #messageTitleCtrl="ngModel" required>\n        <span class="d-block small text-danger" *ngIf="!messageTitleCtrl.valid && messageTitleCtrl.touched">\n            Subject is required.\n        </span>\n    </div>\n\n    <div class="form-group mb-4">\n        <label for="messageBodyInput">Message</label>        \n        <textarea name="messageBodyInput" id="messageBodyInput"\n                  class="form-control"\n                  #emailBody\n                  autosize [minRows]="5" [maxRows]="10"\n                  [(ngModel)]="messageBody" #messageBodyCtrl="ngModel" required>\n        </textarea>\n        <span class="d-block small text-danger" *ngIf="!messageBodyCtrl.valid && messageBodyCtrl.touched">\n            Body message is required.\n        </span>\n    </div>\n\n    <div class="d-flex justify-content-end mb-4">\n        <button type="button" class="btn btn-primary" (click)="submit()" [disabled]="alertType == 3"\n                *ngIf="!showCloseBtn; else closeBtnTmpl">\n            Submit\n            <fa-icon class="ml-2" [icon]="faSpinner" [spin]="true" *ngIf="alertType == 3"></fa-icon>\n        </button>\n        <ng-template #closeBtnTmpl>\n            <button type="button" class="btn btn-secondary" (click)="close()">\n                Close\n            </button>\n        </ng-template>\n    </div>\n</div>\n',styles:[""]}),w("design:paramtypes",[])],t)}(c.EmailFormAbstractComponent),K=1,q=function(){function e(){this.isCollapsed=!1,this.titleClass="",this.faChevronUp=s.faChevronUp,this.faChevronDown=s.faChevronDown,this.faChevronRight=s.faChevronRight,this.elementId="expandableCardBody"+K++}return e.prototype.ngOnInit=function(){},B([n.Input(),w("design:type",Object)],e.prototype,"isCollapsed",void 0),B([n.Input(),w("design:type",Object)],e.prototype,"titleClass",void 0),e=B([n.Component({selector:"polp-bs-expandable-card",template:'<div class="card">\n    <a class="card-header" (click)="isCollapsed = !isCollapsed"\n       [attr.aria-expanded]="!isCollapsed" [attr.aria-controls]="elementId">\n        <ng-content select="[title]"></ng-content>        \n        <fa-icon [icon]="isCollapsed ? faChevronRight : faChevronDown"></fa-icon>\n    </a>\n    <div class="card-body" id="{{elementId}}" [collapse]="isCollapsed" [isAnimated]="true">\n        <ng-content select="[body]"></ng-content>\n    </div>\n</div>\n',styles:[""]}),w("design:paramtypes",[])],e)}(),P=function(){function e(){this.result=new t.Subject}return e.prototype.closeModal=function(e){this.result.next(e),this.result.complete(),this.modalId?this.bsModalService.hide(this.modalId):this.bsModalRef.hide()},B([n.Input(),w("design:type",Number)],e.prototype,"modalId",void 0),e}(),V=function(){function e(){this.faSearch=s.faSearch,this.faTimes=s.faTimes,this.formClass="border rounded my-2 py-4 px-4 bg-light",this.inputClass="form-control",this.prependText="Filter",this.debounceTime=500,this.minLength=0,this.onSearch=new n.EventEmitter,this._emitEvent=!1}return Object.defineProperty(e.prototype,"emitEvent",{get:function(){var e=this._emitEvent;return this._emitEvent=!1,e},set:function(e){this._emitEvent=e},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.searchControl=new i.FormControl(this.initKeyword||""),this.effectiveKeyword=this.initKeyword,this.startObserveSearchKeyword()},e.prototype.ngOnDestroy=function(){this.stopObserveSearchKeyword()},e.prototype.cancelTypedKeyword=function(){this.searchControl.setValue(""),this.searchControlElem.nativeElement.focus()},e.prototype.kickOffSearch=function(){this.effectiveKeyword=this.anyFutureKeyword,this.onSearch.emit()},e.prototype.resetKeyword=function(e){void 0===e&&(e=!1),this.emitEvent=e,this.cancelTypedKeyword()},e.prototype.startObserveSearchKeyword=function(){var e=this;this._searchKeywordSubr=this.searchControl.valueChanges.pipe(v.debounceTime(this.debounceTime)).subscribe((function(n){n=(n||"").toLowerCase(),e.anyFutureKeyword=n,(e.minLength>0&&e.anyFutureKeyword.length>=e.minLength||e.emitEvent)&&e.kickOffSearch()}))},e.prototype.stopObserveSearchKeyword=function(){this._searchKeywordSubr&&this._searchKeywordSubr.unsubscribe()},B([n.Input(),w("design:type",String)],e.prototype,"initKeyword",void 0),B([n.Input(),w("design:type",Object)],e.prototype,"formClass",void 0),B([n.Input(),w("design:type",Object)],e.prototype,"inputClass",void 0),B([n.Input(),w("design:type",Object)],e.prototype,"prependText",void 0),B([n.Input(),w("design:type",Object)],e.prototype,"debounceTime",void 0),B([n.Input(),w("design:type",Number)],e.prototype,"minLength",void 0),B([n.Output(),w("design:type",n.EventEmitter)],e.prototype,"onSearch",void 0),B([n.ViewChild("searchControlElem"),w("design:type",n.ElementRef)],e.prototype,"searchControlElem",void 0),e=B([n.Component({selector:"polp-bs-search-box-widget",template:'<form [ngClass]="formClass" (ngSubmit)="kickOffSearch()">\n    <div class="input-group">\n        <div class="input-group-prepend" *ngIf="prependText">\n            <span class="input-group-text">{{prependText}}</span>\n        </div>\n        <input [ngClass]="inputClass" type="text" #searchControlElem\n               [formControl]="searchControl"\n               [autofocus]="true" />\n        <div class="input-group-append">\n            <button class="btn btn-secondary icon-only" type="button" *ngIf="anyFutureKeyword"\n                    tooltip="Cancel"\n                    (click)="resetKeyword(true)">\n                <fa-icon [icon]="faTimes"></fa-icon>                \n            </button>\n            <button class="btn btn-primary icon-only" type="submit"\n                    tooltip="Search">\n                <fa-icon [icon]="faSearch"></fa-icon>                \n            </button>\n        </div>\n    </div>\n</form>\n\n',styles:[""]}),w("design:paramtypes",[])],e)}(),z=function(){function e(){this.initSize=40,this.options=[40,100,200,400,800],this.onChange=new n.EventEmitter,this.size=40}return e.prototype.ngOnInit=function(){this.size=this.initSize},e.prototype.changeSize=function(e){this.size=e,this.onChange.emit(e)},B([n.Input(),w("design:type",Object)],e.prototype,"initSize",void 0),B([n.Input(),w("design:type",Array)],e.prototype,"options",void 0),B([n.Output(),w("design:type",Object)],e.prototype,"onChange",void 0),e=B([n.Component({selector:"polp-bs-page-size-options-widget",template:'<nav aria-label="page size options">\n    <ul class="pagination">\n        <ng-container *ngFor="let o of options">\n            <li class="page-item" [ngClass]="{\'active\': size == o}">\n                <a class="page-link" (click)="changeSize(o)">{{o}}</a>\n            </li>\n        </ng-container>\n    </ul>\n</nav>\n',styles:[".page-link{cursor:pointer}"]}),w("design:paramtypes",[])],e)}(),D=function(){function e(){}return e=B([n.NgModule({declarations:[T,j,R,F,L,q,V,z],imports:[p.CommonModule,m.RouterModule,i.FormsModule,i.ReactiveFormsModule,h.AlertModule,o.ModalModule,b.CollapseModule,y.FontAwesomeModule,d.FtAutofocusModule,u.AutosizeModule,f.TagInputModule,g.NgxMaskModule],exports:[T,j,R,F,L,q,V,z],entryComponents:[]})],e)}(),U=function(){function e(){this._modalId=0}return Object.defineProperty(e.prototype,"modalId",{get:function(){return this._modalId++,this._modalId},enumerable:!0,configurable:!0}),e.ɵprov=n.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e=B([n.Injectable({providedIn:"root"}),w("design:paramtypes",[])],e)}(),$=function(){function e(e){this._modalService=e}return e.prototype.showConfirmAsync=function(e,n,t){return void 0===t&&(t="modal-dialog-centered"),this._modalService.show(j,{animated:!0,keyboard:!1,class:t,initialState:{enableEnter:!0,title:e,innerBody:n},ignoreBackdropClick:!0}).content.result.toPromise()},e.ctorParameters=function(){return[{type:o.BsModalService}]},e.ɵprov=n.ɵɵdefineInjectable({factory:function(){return new e(n.ɵɵinject(o.BsModalService))},token:e,providedIn:"root"}),e=B([n.Injectable({providedIn:"root"}),w("design:paramtypes",[o.BsModalService])],e)}();e.AlertBoxComponent=j,e.BreadcrumbClipboardService=O,e.BreadcrumbComponent=T,e.BsModalAssistantService=U,e.CommonModalsService=$,e.EmailComposerComponent=F,e.ExpandableCardComponent=q,e.ObservableModalAbstractComponent=P,e.PageSizeOptionsWidgetComponent=z,e.PolpBsComponentsModule=D,e.PromptFormComponent=R,e.PromptModalComponent=L,e.SearchBoxWidgetComponent=V,e.makeValidations=A,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=polpware-bs-components.umd.min.js.map