import { Validators } from '@angular/forms';
export function makeValidations(data) {
    var validations = Object.keys(data);
    var x = validations.map(function (a) {
        switch (a) {
            case 'required':
                return Validators.required;
            case 'min':
                return Validators.min(data.min.value);
            case 'max':
                return Validators.max(data.max.value);
            case 'pattern':
                return Validators.pattern(data.pattern.value);
            case 'minLength':
                return Validators.minLength(data.minLength.value);
            case 'maxLength':
                return Validators.maxLength(data.maxLength.value);
            default:
                return null;
        }
    });
    x = x.filter(function (a) { return !!a; });
    return Validators.compose(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1oZWxwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvYnMtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9mb3JtLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFpQnpELE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBc0I7SUFDbEQsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQztRQUNyQixRQUFRLENBQUMsRUFBRTtZQUNQLEtBQUssVUFBVTtnQkFDWCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDL0IsS0FBSyxLQUFLO2dCQUNOLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEtBQUssS0FBSztnQkFDTixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxLQUFLLFNBQVM7Z0JBQ1YsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsS0FBSyxXQUFXO2dCQUNaLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RELEtBQUssV0FBVztnQkFDWixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RDtnQkFDSSxPQUFPLElBQUksQ0FBQztTQUNuQjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFILENBQUcsQ0FBQyxDQUFDO0lBRXZCLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFrQixDQUFDLENBQUM7QUFDbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgSVZhbGlkYXRpb25zU3BlYyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IHtcclxuICAgICAgICB2YWx1ZTogYW55O1xyXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUlucHV0RmllbGRTcGVjIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogYW55O1xyXG4gICAgY2F0ZWdvcnk6IHN0cmluZztcclxuICAgIHZhbGlkYXRvcnM6IElWYWxpZGF0aW9uc1NwZWM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVmFsaWRhdGlvbnMoZGF0YTogSVZhbGlkYXRpb25zU3BlYykge1xyXG4gICAgY29uc3QgdmFsaWRhdGlvbnMgPSBPYmplY3Qua2V5cyhkYXRhKTtcclxuICAgIGxldCB4ID0gdmFsaWRhdGlvbnMubWFwKGEgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoYSkge1xyXG4gICAgICAgICAgICBjYXNlICdyZXF1aXJlZCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5yZXF1aXJlZDtcclxuICAgICAgICAgICAgY2FzZSAnbWluJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1pbihkYXRhLm1pbi52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21heCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5tYXgoZGF0YS5tYXgudmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdwYXR0ZXJuJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLnBhdHRlcm4oZGF0YS5wYXR0ZXJuLnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAnbWluTGVuZ3RoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBWYWxpZGF0b3JzLm1pbkxlbmd0aChkYXRhLm1pbkxlbmd0aC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21heExlbmd0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5tYXhMZW5ndGgoZGF0YS5tYXhMZW5ndGgudmFsdWUpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgeCA9IHguZmlsdGVyKGEgPT4gISFhKTtcclxuXHJcbiAgICByZXR1cm4gVmFsaWRhdG9ycy5jb21wb3NlKHggYXMgVmFsaWRhdG9yRm5bXSk7XHJcbn1cclxuXHJcbiJdfQ==