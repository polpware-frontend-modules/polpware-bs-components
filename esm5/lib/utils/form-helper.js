import { Validators } from '@angular/forms';
export function makeValidations(data) {
    var validations = Object.keys(data);
    var x = validations.map(function (a) {
        switch (a) {
            case 'required':
                return Validators.required;
            case 'min':
                return Validators.min(data.min.value);
            case 'max':
                return Validators.max(data.max.value);
            case 'pattern':
                return Validators.pattern(data.pattern.value);
            case 'minLength':
                return Validators.minLength(data.minLength.value);
            case 'maxLength':
                return Validators.maxLength(data.maxLength.value);
            default:
                return null;
        }
    });
    x = x.filter(function (a) { return !!a; });
    return Validators.compose(x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1oZWxwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvYnMtY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9mb3JtLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFpQnpELE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBc0I7SUFDbEQsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQztRQUNyQixRQUFRLENBQUMsRUFBRTtZQUNQLEtBQUssVUFBVTtnQkFDWCxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUM7WUFDL0IsS0FBSyxLQUFLO2dCQUNOLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLEtBQUssS0FBSztnQkFDTixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxLQUFLLFNBQVM7Z0JBQ1YsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsS0FBSyxXQUFXO2dCQUNaLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RELEtBQUssV0FBVztnQkFDWixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RDtnQkFDSSxPQUFPLElBQUksQ0FBQztTQUNuQjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsQ0FBQyxFQUFILENBQUcsQ0FBQyxDQUFDO0lBRXZCLE9BQU8sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFrQixDQUFDLENBQUM7QUFDbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgSVZhbGlkYXRpb25zU3BlYyA9IHtcclxuICAgIFtrZXk6IHN0cmluZ106IHtcclxuICAgICAgICB2YWx1ZTogYW55O1xyXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUlucHV0RmllbGRTcGVjIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogYW55O1xyXG4gICAgY2F0ZWdvcnk6IHN0cmluZztcclxuICAgIHZhbGlkYXRpb25zOiBJVmFsaWRhdGlvbnNTcGVjO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZVZhbGlkYXRpb25zKGRhdGE6IElWYWxpZGF0aW9uc1NwZWMpIHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb25zID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICBsZXQgeCA9IHZhbGlkYXRpb25zLm1hcChhID0+IHtcclxuICAgICAgICBzd2l0Y2ggKGEpIHtcclxuICAgICAgICAgICAgY2FzZSAncmVxdWlyZWQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMucmVxdWlyZWQ7XHJcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5taW4oZGF0YS5taW4udmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdtYXgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4KGRhdGEubWF4LnZhbHVlKTtcclxuICAgICAgICAgICAgY2FzZSAncGF0dGVybic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5wYXR0ZXJuKGRhdGEucGF0dGVybi52YWx1ZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ21pbkxlbmd0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5taW5MZW5ndGgoZGF0YS5taW5MZW5ndGgudmFsdWUpO1xyXG4gICAgICAgICAgICBjYXNlICdtYXhMZW5ndGgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZhbGlkYXRvcnMubWF4TGVuZ3RoKGRhdGEubWF4TGVuZ3RoLnZhbHVlKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHggPSB4LmZpbHRlcihhID0+ICEhYSk7XHJcblxyXG4gICAgcmV0dXJuIFZhbGlkYXRvcnMuY29tcG9zZSh4IGFzIFZhbGlkYXRvckZuW10pO1xyXG59XHJcblxyXG4iXX0=